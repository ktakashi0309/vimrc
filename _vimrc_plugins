""vimメモ
"bundleのインストール
"まずgitのインストール
"mkdir -p ./vimfiles/bundle
"git clone https://github.com/Shougo/neobundle.vim.git ./vimfiles/bundle/neobundle.vim
""neocompleteを有効にするためにはluaを有効にしてvimをコンパイルする必要がある
""vaxeを有効にするためにはpythonを有効にしてvimをコンパイルする必要がある
""vaxeではPython2.x系(2.7only?)が必要
""vaxeで使うbuild fileの名前はbuild.hxmlにする必要がある
""vim7.4で正常動作すると確認
""tagbarでhaxeを使う場合~/.ctagsにhaxeの設定を記述する必要がある
"
""NeoBundle用にfiletypeをoff
filetype off
"
""NeoBundleをruntimepathに追加{
if has('vim_starting')
 if &compatible
     set nocompatible               " Be iMproved
   endif
   set runtimepath+=$VIM/vimfiles/bundle/neobundle.vim
endif
""}
call neobundle#begin(expand('$VIM/vimfiles/bundle/'))

"tern.vim (javascript解析)インストール{
"python、node.jsが必要
"python2付でvimをコンパイルする必要がある。
NeoBundle 'marijnh/tern_for_vim', {
			\'build': {
			\'others': 'npm install'
			\}}
"カーソル下の定義に飛ぶ
nnoremap <silent> ,td :<C-u>TernDef<CR>
"カーソル下の参照に飛ぶ
nnoremap <silent> ,tr :<C-u>TernRefs<CR>
"}
"
"
"tagbar(tagの構造をツリー表示){

NeoBundle 'majutsushi/tagbar'
nmap ,tb :TagbarToggle<CR>
"}
"
""日本語ヘルプ{
""NeoBundle 'vim-jp/vimdoc-ja.git'
""helptags $VIM/vimfiles/bundle//vimdoc-ja/doc
"""helptags ~/.vim//vimdoc-ja/doc
""set helplang=ja,en
"""}
"
""molokai カラースキームインストール
NeoBundle 'tomasr/molokai'

""カラー表示をon
syntax on
"
" Unite(vim用統合ファイラー兼ランチャー){
NeoBundle 'Shougo/unite.vim'
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
nnoremap <silent> ,uj :<C-u>Unite jump<CR>
nnoremap <silent> ,ug :<C-u>Unite grep<CR>

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ファイルは tabdrop で開く(vim新しくしたら使えなくなった
"call unite#custom#default_action('file' , 'tabdrop')
"}
"
"
""lightline.vimインストール(ステータスラインのカスタマイズ){
NeoBundle 'itchyny/lightline.vim'
set laststatus=2
set t_Co=256


let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode'
        \ }
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
"}
"
"Neoconplete.vim(補完のポップアップ){
NeoBundle 'Shougo/neocomplete.vim'
"use neocomplete.
     let g:neocomplete#enable_at_startup = 1
"" Use smartcase.
     let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
     let g:neocomplete#sources#syntax#min_keyword_length = 3
     let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
     let g:neocomplete#sources#dictionary#dictionaries = {
     \ 'default' : '',
     \ 'vimshell' : $HOME.'/.vimshell_hist',
     \ 'scheme' : $HOME.'/.gosh_completions'
     \ }
" Define keyword.
     if !exists('g:neocomplete#keyword_patterns')
     let g:neocomplete#keyword_patterns = {}
     endif
     let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
     inoremap <expr><C-g> neocomplete#undo_completion()
     inoremap <expr><C-l> neocomplete#complete_common_string()
	 inoremap <expr><CR>  pumvisible() ? neocomplete#close_popup() : "<CR>"
"}


"vaxe用{

NeoBundle 'jdonaldson/vaxe'

"set autogroup
augroup MyAutoCmd
	  autocmd!
  augroup END

  " vaxeの動作にはautowriteを有効にする必要がある
  autocmd MyAutoCmd FileType haxe
        \ setl autowrite
  autocmd MyAutoCmd FileType hxml
        \ setl autowrite
  autocmd MyAutoCmd FileType nmml.xml
        \ setl autowrite

  let g:vaxe_haxe_version = 3

  function! s:init_vaxe_keymap()
    " .hxmlファイルを開いてくれるやつ
	  nnoremap <buffer> ,vo :<C-u>call vaxe#OpenHxml()<CR>
    " タグファイル作ってくれるやつ(別途、.ctagsの定義をしませう)
	  nnoremap <buffer> ,vc :<C-u>call vaxe#Ctags()<CR>
	    " 自動インポートな
		  nnoremap <buffer> ,vi :<C-u>call vaxe#ImportClass()<CR>
	  endfunction

	  autocmd MyAutoCmd FileType haxe call s:init_vaxe_keymap()
	  autocmd MyAutoCmd FileType hxml call s:init_vaxe_keymap()
	  autocmd MyAutoCmd FileType nmml.xml call s:init_vaxe_keymap()

	  " 以下はNeocomplete用
	  if !exists('g:neocomplete#sources#omni#input_patterns')
		    let g:neocomplete#sources#omni#input_patterns = {}
		endif
	let g:neocomplete#sources#omni#input_patterns.haxe = '\v([\]''"\)]|\w|(^\s*))(\.|\()'
autocmd BufNewFile,BufRead *.hx set filetype=haxe
autocmd BufNewFile,BufRead *.hxml set filetype=hxml

"autocmd FileType haxe setlocal omnifunc=vaxe#HaxeComplete
" neocompleteが呼び出すオムニ補完関数名
"if !exists('g:neocomplete#sources#omni#functions')
"	let g:neocomplete#sources#omni#functions = {}
"endif
"let g:neocomplete#sources#omni#functions.haxe = 'vaxe#HaxeComplete'
"}

"unite-tag用設定{
NeoBundle 'tsukkee/unite-tag'
"------------------------------------
" Unite-tag.vim
"------------------------------------
"{{{
autocmd BufEnter *
      \   if empty(&buftype)
      \|     noremap <silent> ,ut :<C-u>UniteWithCursorWord -immediately tag<CR>
      \|  endif
"}}}

"vim-latex{
NeoBundle 'git://git.code.sf.net/p/vim-latex/vim-latex'
filetype plugin on
filetype indent on
set shellslash
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Imap_UsePlaceHolders = 1
let g:Imap_DeleteEmptyPlaceHolders = 1
let g:Imap_StickyPlaceHolders = 0
let g:Tex_DefaultTargetFormat = 'pdf'
"let g:Tex_FormatDependency_pdf = 'pdf'
let g:Tex_FormatDependency_pdf = 'dvi,pdf'
"let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
let g:Tex_FormatDependency_ps = 'dvi,ps'
let g:Tex_CompileRule_pdf = 'ptex2pdf -l -ot "-kanji=utf8 -guess-input-enc -synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
"let g:Tex_CompileRule_pdf = 'ptex2pdf -l -u -ot "-kanji=utf8 -no-guess-input-enc -synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
"let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'lualatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'luajitlatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'xelatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'dvipdfmx $*.dvi'
"let g:Tex_CompileRule_pdf = 'ps2pdf.bat $*.ps'
let g:Tex_CompileRule_ps = 'dvips -Ppdf -o $*.ps $*.dvi'
let g:Tex_CompileRule_dvi = 'platex -kanji=utf8 -guess-input-enc -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_dvi = 'uplatex -kanji=utf8 -no-guess-input-enc -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
let g:Tex_BibtexFlavor = 'pbibtex -kanji=utf8'
"let g:Tex_BibtexFlavor = 'upbibtex'
"let g:Tex_BibtexFlavor = 'bibtex'
"let g:Tex_BibtexFlavor = 'bibtexu'
let g:Tex_MakeIndexFlavor = 'mendex -U $*.idx'
"let g:Tex_MakeIndexFlavor = 'makeindex $*.idx'
"let g:Tex_MakeIndexFlavor = 'texindy $*.idx'
let g:Tex_ViewRule_pdf = 'texworks'
"let g:Tex_ViewRule_pdf = 'rundll32 shell32,ShellExec_RunDLL SumatraPDF -reuse-instance -inverse-search "C:\vim\gvim.exe -n -c \":RemoteOpen +\%l \%f\""'
"let g:Tex_ViewRule_pdf = 'rundll32 shell32,ShellExec_RunDLL firefox -new-window'
"let g:Tex_ViewRule_pdf = 'powershell -Command "& {$p = [System.String]::Concat(''"""'',[System.IO.Path]::GetFullPath($args),''"""'');Start-Process chrome -ArgumentList (''--new-window'',$p)}"'
"let g:Tex_ViewRule_pdf = 'pdfopen --rxi --file'
let g:Tex_AutoFolding=0

"}

"ps1.vimインストール{

NeoBundle "PProvost/vim-ps1"
"}

"vim-scala{

"NeoBundle 'derekwyatt/vim-scala'
"au BufRead,BufNewFile *.scala,*.sbt set filetype=scala

"}

"unite-outline{
NeoBundle "h1mesuke/unite-outline"

nnoremap <silent> ,uo :<C-u>Unite outline<CR>
"}

"neosnippet{
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

"}

"自動整形の指定(Neobundleの後に記述すべし)
autocmd FileType * set formatoptions=c

call neobundle#end()
NeoBundleCheck
colorscheme molokai
